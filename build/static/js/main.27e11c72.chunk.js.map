{"version":3,"sources":["components/Title.tsx","components/ReloadButton.tsx","components/TablePaginationActions.tsx","utilities/helpers.ts","components/Table.tsx","components/DatePicker.tsx","components/CurrentExchangePerDay.tsx","components/Loading.tsx","App.tsx","hooks/useCurrentExchange.tsx","reportWebVitals.ts","index.tsx"],"names":["style","makeStyles","title","color","indigo","Title","classes","Box","m","className","button","backgroundColor","Reload","onClick","Button","variant","theme","createStyles","root","flexShrink","marginLeft","spacing","TablePaginationActions","props","useTheme","count","page","rowsPerPage","onChangePage","IconButton","event","disabled","aria-label","direction","Math","ceil","max","formatDate","timestamp","separator","format","d","Date","year","Intl","DateTimeFormat","month","day","table","minWidth","CustomTable","data","React","useState","setPage","setRowsPerPage","emptyRows","min","length","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","map","item","align","toUpperCase","TableBody","slice","row","Object","keys","key","scope","toFixed","date","height","colSpan","TableFooter","TablePagination","rowsPerPageOptions","label","value","SelectProps","inputProps","native","newPage","onChangeRowsPerPage","parseInt","target","ActionsComponent","datepicker","padding","margin","DatePicker","minDate","onChange","selectedDate","setSelectedDate","utils","DateFnsUtils","clearable","list","display","flexDirection","borderRadius","marginBottom","listItem","textAlign","CurrentExchangePerDay","currentExchanges","result","setResult","useEffect","parse","results","filter","getSelectedResult","List","ListItem","ListItemText","primary","secondary","loading","Loading","mt","CircularProgress","App","timer","useRef","reload","setReload","showAlert","setShowAlert","currentExchange","setCurrentExchange","getCurrentExchange","a","url","window","location","hostname","axios","get","console","warn","undefined","useCurrentExchange","current","setTimeout","clearTimeout","Grid","container","xs","sm","items","lastDate","getMinDate","alert","Container","Alert","severity","feedback","ReloadButton","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.27e11c72.chunk.js","sourcesContent":["import { makeStyles } from '@material-ui/core/styles';\r\nimport { indigo } from '@material-ui/core/colors';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nconst style = makeStyles({\r\n  title: {\r\n    color: indigo[500],\r\n  },\r\n});\r\n\r\nconst Title = () => {\r\n  const classes = style();\r\n  return (\r\n    <Box m={2} className={classes.title}>\r\n      <h1>Current exchange from SNB</h1>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Title;\r\n","import { makeStyles } from '@material-ui/core';\r\nimport Box from '@material-ui/core/Box';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport { indigo } from '@material-ui/core/colors';\r\n\r\nconst style = makeStyles({\r\n  button: {\r\n    backgroundColor: indigo[500],\r\n    color: indigo[50],\r\n    '&:hover': {\r\n      backgroundColor: indigo[300],\r\n      color: indigo[900],\r\n    },\r\n  },\r\n});\r\n\r\ninterface IProps {\r\n  onClick: () => void;\r\n}\r\n\r\nconst Reload = ({ onClick }: IProps) => {\r\n  const classes = style();\r\n\r\n  return (\r\n    <Box m={2}>\r\n      <Button variant=\"contained\" className={classes.button} onClick={onClick}>\r\n        Reload\r\n      </Button>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Reload;\r\n","import React from 'react';\r\nimport {\r\n  makeStyles,\r\n  Theme,\r\n  createStyles,\r\n  useTheme,\r\n} from '@material-ui/core/styles';\r\n\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\r\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\r\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\r\nimport LastPageIcon from '@material-ui/icons/LastPage';\r\n\r\nconst style = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      flexShrink: 0,\r\n      marginLeft: theme.spacing(2.5),\r\n    },\r\n  })\r\n);\r\n\r\ninterface IProps {\r\n  count: number;\r\n  page: number;\r\n  rowsPerPage: number;\r\n  onChangePage: (\r\n    event: React.MouseEvent<HTMLButtonElement>,\r\n    newPage: number\r\n  ) => void;\r\n}\r\n\r\nconst TablePaginationActions = (props: IProps) => {\r\n  const classes = style();\r\n  const theme = useTheme();\r\n  const { count, page, rowsPerPage, onChangePage } = props;\r\n\r\n  const handleFirstPageButtonClick = (\r\n    event: React.MouseEvent<HTMLButtonElement>\r\n  ) => {\r\n    onChangePage(event, 0);\r\n  };\r\n\r\n  const handleBackButtonClick = (\r\n    event: React.MouseEvent<HTMLButtonElement>\r\n  ) => {\r\n    onChangePage(event, page - 1);\r\n  };\r\n\r\n  const handleNextButtonClick = (\r\n    event: React.MouseEvent<HTMLButtonElement>\r\n  ) => {\r\n    onChangePage(event, page + 1);\r\n  };\r\n\r\n  const handleLastPageButtonClick = (\r\n    event: React.MouseEvent<HTMLButtonElement>\r\n  ) => {\r\n    onChangePage(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <IconButton\r\n        onClick={handleFirstPageButtonClick}\r\n        disabled={page === 0}\r\n        aria-label=\"first page\">\r\n        {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\r\n      </IconButton>\r\n      <IconButton\r\n        onClick={handleBackButtonClick}\r\n        disabled={page === 0}\r\n        aria-label=\"previous page\">\r\n        {theme.direction === 'rtl' ? (\r\n          <KeyboardArrowRight />\r\n        ) : (\r\n          <KeyboardArrowLeft />\r\n        )}\r\n      </IconButton>\r\n      <IconButton\r\n        onClick={handleNextButtonClick}\r\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n        aria-label=\"next page\">\r\n        {theme.direction === 'rtl' ? (\r\n          <KeyboardArrowLeft />\r\n        ) : (\r\n          <KeyboardArrowRight />\r\n        )}\r\n      </IconButton>\r\n      <IconButton\r\n        onClick={handleLastPageButtonClick}\r\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n        aria-label=\"last page\">\r\n        {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\r\n      </IconButton>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TablePaginationActions;\r\n","type DateFormat = 'DD:MM:YYYY' | 'YYYY:MM:DD';\r\n\r\nexport function formatDate(\r\n  timestamp: number,\r\n  separator: string = '.',\r\n  format: DateFormat = 'DD:MM:YYYY'\r\n): string {\r\n  const d = new Date(timestamp);\r\n  const year = new Intl.DateTimeFormat('en', { year: 'numeric' }).format(d);\r\n  const month = new Intl.DateTimeFormat('en', { month: '2-digit' }).format(d);\r\n  const day = new Intl.DateTimeFormat('en', { day: '2-digit' }).format(d);\r\n  if (format === 'YYYY:MM:DD')\r\n    return `${year}${separator}${month}${separator}${day}`;\r\n  return `${day}${separator}${month}${separator}${year}`;\r\n}\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport Table from '@material-ui/core/Table';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableFooter from '@material-ui/core/TableFooter';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nimport TablePaginationActions from './TablePaginationActions';\r\nimport { ICurrentExchange } from '../hooks/useCurrentExchange';\r\nimport { formatDate } from '../utilities/helpers';\r\n\r\nconst style = makeStyles({\r\n  table: {\r\n    minWidth: 500,\r\n  },\r\n});\r\n\r\ninterface IProps {\r\n  data: ICurrentExchange[];\r\n}\r\n\r\nexport default function CustomTable({ data }: IProps) {\r\n  const classes = style();\r\n\r\n  const [page, setPage] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n\r\n  const emptyRows =\r\n    rowsPerPage - Math.min(rowsPerPage, data.length - page * rowsPerPage);\r\n\r\n  const handleChangePage = (\r\n    event: React.MouseEvent<HTMLButtonElement> | null,\r\n    newPage: number\r\n  ) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (\r\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\r\n  ) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  return (\r\n    <TableContainer component={Paper}>\r\n      <Table className={classes.table} aria-label=\"custom pagination table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell>Date</TableCell>\r\n            {['eur', 'usd', 'jpy', 'gbp'].map((item) => (\r\n              <TableCell key={item} align=\"right\">\r\n                {item.toUpperCase()}\r\n              </TableCell>\r\n            ))}\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {(rowsPerPage > 0\r\n            ? data.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n            : data\r\n          ).map((row) => (\r\n            <TableRow key={row.date}>\r\n              {Object.keys(row).map((key) => {\r\n                if (key === 'date') {\r\n                  return (\r\n                    <TableCell key={key} component=\"th\" scope=\"row\">\r\n                      {formatDate(row[key])}\r\n                    </TableCell>\r\n                  );\r\n                } else {\r\n                  return (\r\n                    <TableCell key={key} align=\"right\">\r\n                      {row[key].toFixed(4)}\r\n                    </TableCell>\r\n                  );\r\n                }\r\n              })}\r\n            </TableRow>\r\n          ))}\r\n          {emptyRows > 0 && (\r\n            <TableRow style={{ height: 53 * emptyRows }}>\r\n              <TableCell colSpan={6} />\r\n            </TableRow>\r\n          )}\r\n        </TableBody>\r\n        <TableFooter>\r\n          <TableRow>\r\n            <TablePagination\r\n              rowsPerPageOptions={[5, 10, 25, { label: 'All', value: -1 }]}\r\n              colSpan={5}\r\n              count={data.length}\r\n              rowsPerPage={rowsPerPage}\r\n              page={page}\r\n              SelectProps={{\r\n                inputProps: { 'aria-label': 'rows per page' },\r\n                native: true,\r\n              }}\r\n              onChangePage={handleChangePage}\r\n              onChangeRowsPerPage={handleChangeRowsPerPage}\r\n              ActionsComponent={TablePaginationActions}\r\n            />\r\n          </TableRow>\r\n        </TableFooter>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n}\r\n","import { useState } from 'react';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport {\r\n  KeyboardDatePicker,\r\n  MuiPickersUtilsProvider,\r\n} from '@material-ui/pickers';\r\nimport { MaterialUiPickersDate } from '@material-ui/pickers/typings/date';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n// import { formatDate } from '../utilities/helpers';\r\n\r\nconst style = makeStyles({\r\n  datepicker: {\r\n    padding: 8,\r\n    margin: 8,\r\n  },\r\n});\r\n\r\ninterface IProps {\r\n  minDate?: Date;\r\n  onChange: (date: Date) => void;\r\n}\r\n\r\nconst DatePicker = (props: IProps) => {\r\n  const { minDate, onChange } = props;\r\n\r\n  const classes = style();\r\n\r\n  const [selectedDate, setSelectedDate] = useState<Date | null>(new Date());\r\n\r\n  return (\r\n    <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n      <KeyboardDatePicker\r\n        className={classes.datepicker}\r\n        clearable\r\n        value={selectedDate}\r\n        onChange={(date: MaterialUiPickersDate) => {\r\n          date && setSelectedDate(date);\r\n          date && onChange(date);\r\n        }}\r\n        minDate={minDate || new Date()}\r\n        format=\"dd/MM/yyyy\"\r\n      />\r\n    </MuiPickersUtilsProvider>\r\n  );\r\n};\r\n\r\nexport default DatePicker;\r\n\r\n/*\r\nfunction getDefaultDate(): string {\r\n  const now: number = Date.now();\r\n  return formatDate(now, '/');\r\n}\r\n*/\r\n","import { useEffect, useState } from 'react';\r\n\r\nimport { makeStyles } from '@material-ui/core';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\n\r\nimport { ICurrentExchange } from '../hooks/useCurrentExchange';\r\nimport { indigo } from '@material-ui/core/colors';\r\n\r\ninterface IProps {\r\n  currentExchanges: ICurrentExchange[];\r\n  date: Date;\r\n}\r\n\r\nconst style = makeStyles({\r\n  list: {\r\n    display: 'flex',\r\n    flexDirection: 'row',\r\n    padding: 0,\r\n    backgroundColor: indigo[300],\r\n    borderRadius: 4,\r\n    marginBottom: 8,\r\n  },\r\n  listItem: {\r\n    textAlign: 'center',\r\n    color: 'white',\r\n  },\r\n});\r\n\r\nconst CurrentExchangePerDay = (props: IProps) => {\r\n  const { currentExchanges, date } = props;\r\n\r\n  const classes = style();\r\n\r\n  const [result, setResult] = useState<ICurrentExchange>(currentExchanges[0]);\r\n\r\n  useEffect(() => {\r\n    const getSelectedResult = () => {\r\n      const timestamp = Date.parse(`${date}`);\r\n      const results = currentExchanges.filter((item) => timestamp >= item.date); // >= to include days without data\r\n      setResult(results[0]);\r\n    };\r\n    date && currentExchanges && getSelectedResult();\r\n  }, [currentExchanges, date]);\r\n\r\n  const list = result && (\r\n    <List className={classes.list}>\r\n      {Object.keys(result).map((key) => {\r\n        return key !== 'date' ? (\r\n          <ListItem key={key} className={classes.listItem}>\r\n            <ListItemText primary={key.toUpperCase()} secondary={result[key]} />\r\n          </ListItem>\r\n        ) : null;\r\n      })}\r\n    </List>\r\n  );\r\n\r\n  return <div>{list}</div>;\r\n};\r\n\r\nexport default CurrentExchangePerDay;\r\n","import { makeStyles } from '@material-ui/core/styles';\r\nimport { indigo } from '@material-ui/core/colors';\r\nimport Box from '@material-ui/core/Box';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nconst style = makeStyles({\r\n  loading: {\r\n    color: indigo[500],\r\n  },\r\n});\r\n\r\nconst Loading = () => {\r\n  const classes = style();\r\n  return (\r\n    <Box mt={30} className={classes.loading}>\r\n      <CircularProgress color=\"inherit\" />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Loading;\r\n","import React, { useState, useEffect, useRef, Fragment } from 'react';\r\n\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Alert from '@material-ui/lab/Alert';\r\n\r\nimport {\r\n  ICurrentExchange,\r\n  useCurrentExchange,\r\n} from './hooks/useCurrentExchange';\r\n\r\nimport Title from './components/Title';\r\nimport ReloadButton from './components/ReloadButton';\r\nimport Table from './components/Table';\r\nimport DatePicker from './components/DatePicker';\r\nimport CurrentExchangePerDay from './components/CurrentExchangePerDay';\r\nimport Loading from './components/Loading';\r\n\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const timer = useRef<NodeJS.Timeout>();\r\n\r\n  const [reload, setReload] = useState<boolean>(false);\r\n  const [selectedDate, setSelectedDate] = useState<Date>(new Date());\r\n  const [showAlert, setShowAlert] = useState<boolean>(false);\r\n\r\n  const { currentExchange } = useCurrentExchange(reload);\r\n\r\n  const getMinDate = (items: ICurrentExchange[]): Date => {\r\n    const lastDate = items[items.length - 1].date;\r\n    return new Date(lastDate);\r\n  };\r\n\r\n  useEffect(() => {\r\n    timer.current = setTimeout(() => setShowAlert(true), 10000);\r\n    return () => timer && timer.current && clearTimeout(timer.current);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (currentExchange && timer && timer.current) {\r\n      clearTimeout(timer.current);\r\n      setShowAlert(false);\r\n    }\r\n  }, [currentExchange]);\r\n\r\n  const result = currentExchange && (\r\n    <Fragment>\r\n      <Grid container spacing={2}>\r\n        <Grid item xs={12} sm={3}>\r\n          <DatePicker\r\n            minDate={getMinDate(currentExchange)}\r\n            onChange={(date) => setSelectedDate(date)}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} sm={9}>\r\n          <CurrentExchangePerDay\r\n            currentExchanges={currentExchange}\r\n            date={selectedDate}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <Table data={currentExchange} />\r\n    </Fragment>\r\n  );\r\n\r\n  const alert = (\r\n    <Container>\r\n      <Alert severity=\"error\">\r\n        A connection to the server could not be established.\r\n      </Alert>\r\n    </Container>\r\n  );\r\n\r\n  const feedback = !showAlert ? <Loading /> : alert;\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <main className=\"App-main\">\r\n        <Container>\r\n          <Title />\r\n          <ReloadButton onClick={() => setReload(!reload)} />\r\n          {result}\r\n          {!currentExchange && feedback}\r\n        </Container>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nexport interface ICurrentExchange {\r\n  [key: string]: number;\r\n  date: number;\r\n  eur: number;\r\n  usd: number;\r\n  jpy: number;\r\n  gbp: number;\r\n}\r\n\r\nconst useCurrentExchange = (reload: boolean) => {\r\n  // const [metadata, setMetadata] = useState();\r\n  const [currentExchange, setCurrentExchange] = useState<ICurrentExchange[]>();\r\n\r\n  useEffect(() => {\r\n    const getCurrentExchange = async () => {\r\n      try {\r\n        const url = `http://${window.location.hostname}:5000/api/current-exchange`;\r\n        const { data } = await axios.get(url);\r\n        const { currentExchange } = data;\r\n        // setMetadata(metadata);\r\n        setCurrentExchange(currentExchange);\r\n      } catch (error) {\r\n        console.warn(error);\r\n      }\r\n    };\r\n    setCurrentExchange(undefined);\r\n    getCurrentExchange();\r\n  }, [reload]);\r\n\r\n  return { currentExchange };\r\n};\r\n\r\nexport { useCurrentExchange };\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}